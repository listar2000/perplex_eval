{
  "results": {
    "acp_app_bool": {
      "alias": "acp_app_bool",
      "exact_match,extract-yes-no": 0.45384615384615384,
      "exact_match_stderr,extract-yes-no": 0.04383459241436368
    },
    "acp_app_mcq": {
      "alias": "acp_app_mcq",
      "exact_match,mcq-extract": 0.2846153846153846,
      "exact_match_stderr,mcq-extract": 0.03972867937362452
    },
    "acp_areach_bool": {
      "alias": "acp_areach_bool",
      "exact_match,extract-yes-no": 0.36666666666666664,
      "exact_match_stderr,extract-yes-no": 0.04417518812144313
    },
    "acp_areach_mcq": {
      "alias": "acp_areach_mcq",
      "exact_match,mcq-extract": 0.23333333333333334,
      "exact_match_stderr,mcq-extract": 0.03877199986918665
    },
    "acp_just_bool": {
      "alias": "acp_just_bool",
      "exact_match,extract-yes-no": 0.3076923076923077,
      "exact_match_stderr,extract-yes-no": 0.040636195676567254
    },
    "acp_just_mcq": {
      "alias": "acp_just_mcq",
      "exact_match,mcq-extract": 0.2153846153846154,
      "exact_match_stderr,mcq-extract": 0.03619435936612662
    },
    "acp_land_bool": {
      "alias": "acp_land_bool",
      "exact_match,extract-yes-no": 0.3769230769230769,
      "exact_match_stderr,extract-yes-no": 0.04266800546039561
    },
    "acp_land_mcq": {
      "alias": "acp_land_mcq",
      "exact_match,mcq-extract": 0.2846153846153846,
      "exact_match_stderr,mcq-extract": 0.03972867937362453
    },
    "acp_prog_bool": {
      "alias": "acp_prog_bool",
      "exact_match,extract-yes-no": 0.5461538461538461,
      "exact_match_stderr,extract-yes-no": 0.04383459241436369
    },
    "acp_prog_mcq": {
      "alias": "acp_prog_mcq",
      "exact_match,mcq-extract": 0.24615384615384617,
      "exact_match_stderr,mcq-extract": 0.03792711596479614
    },
    "acp_reach_bool": {
      "alias": "acp_reach_bool",
      "exact_match,extract-yes-no": 0.49230769230769234,
      "exact_match_stderr,extract-yes-no": 0.04401733523929784
    },
    "acp_reach_mcq": {
      "alias": "acp_reach_mcq",
      "exact_match,mcq-extract": 0.2076923076923077,
      "exact_match_stderr,mcq-extract": 0.03571595663393523
    },
    "acp_val_bool": {
      "alias": "acp_val_bool",
      "exact_match,extract-yes-no": 0.3230769230769231,
      "exact_match_stderr,extract-yes-no": 0.04117444688605598
    },
    "acp_val_mcq": {
      "alias": "acp_val_mcq",
      "exact_match,mcq-extract": 0.13846153846153847,
      "exact_match_stderr,mcq-extract": 0.030409344344723827
    }
  },
  "group_subtasks": {
    "acp_val_bool": [],
    "acp_land_bool": [],
    "acp_just_bool": [],
    "acp_prog_bool": [],
    "acp_reach_bool": [],
    "acp_app_bool": [],
    "acp_areach_bool": [],
    "acp_app_mcq": [],
    "acp_just_mcq": [],
    "acp_prog_mcq": [],
    "acp_areach_mcq": [],
    "acp_land_mcq": [],
    "acp_val_mcq": [],
    "acp_reach_mcq": []
  },
  "configs": {
    "acp_app_bool": {
      "task": "acp_app_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_app_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0, with the car c1 on board. The cars are at locations as follows: c0 is at l0.",
            "question": "Is the following action applicable in this state:  travel by sea from location l1 to location l0?",
            "answer": "Step 1: In order to apply the action travel by sea from location l1 to location l0, the following fact(s) must hold in this state: The ferry is at l1 location Step 2: These facts do not hold in the mentioned state: The ferry is at l1 location. So, the action is not applicable. **Final Answer**: No."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 3 trucks and 1 airplane, as well as 7 packages. There are 9 locations across 3 cities.  The locations are in cities as follows: l1-2, l1-0, and l1-1 are in c1; l2-0, l2-1, and l2-2 are in c2; l0-0, l0-2, and l0-1 are in c0.  Currently, p0 and p1 are at l1-2, a0 and p2 are at l0-0, t1 is at l1-0, t0 and p4 are at l0-2, t2 is at l2-0, p6, p3, and p5 are in t0.",
            "question": "Is the following action applicable in this state:  load the object p4 from location l0-2 into the truck t0?",
            "answer": "Let's think step by step.  Step 1: In order to apply the action \"load the object p4 from location l0-2 into the truck t0\", the following fact(s) must hold in this state: p4 is at l0-2 and t0 is at l0-2 Step 2: These facts hold in the mentioned state, so the action is applicable. **Final Answer**: Yes."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_app_mcq": {
      "task": "acp_app_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_app_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l1 location and it is empty. The cars are at locations as follows: c1 and c0 are at l0.",
            "question": "Which of the following actions will be applicable in this state? A. unload the car c1 from the ferry to location l1.  B. load the car c0 at location l1 on to the ferry.  C. load the car c0 at location l0 on to the ferry.  D. sail from location l1 to location l0.",
            "answer": "Let's think step by step.   Step 1: In order to apply the action \"sail from location l1 to location l0\", the following fact(s) must hold in this state:  The ferry is at l1 location Step 2: These facts hold in the mentioned state, so the action \"sail from location l1 to location l0\" is applicable. **Final Answer**: D."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-1 and l1-0 are in c1; l0-0 and l0-1 are in c0.  Currently, a0 and t0 are at l0-0, t1 is at l1-1, p2 is at l1-0, p1 and p3 are in t1, p0 is in t0.",
            "question": "Which of the following actions will be applicable in this state? A. load object p1 into airplane a0 at location l1-0.  B. unload the object p2 from the airplane a0 at location l1-0.  C. navigate the truck t1 from location l1-1 in city c1 to location l1-1 in the same city.  D. operate the airplane a0 from airport l1-0 to airport l0-0.",
            "answer": "Let's think step by step.   Step 1: In order to apply the action \"navigate the truck t1 from location l1-1 in city c1 to location l1-1 in the same city\", the following fact(s) must hold in this state:  t1 is at l1-1 Step 2: These facts hold in the mentioned state, so the action \"navigate the truck t1 from location l1-1 in city c1 to location l1-1 in the same city\" is applicable. **Final Answer**: C."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_areach_bool": {
      "task": "acp_areach_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_areach_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 5 cars, numbered consecutively.  Currently, the ferry is at l1, with the car c4 on board. The cars are at locations as follows: c0 and c3 are at l1; c1 and c2 are at l0.",
            "question": "Is it possible to transition to a state where the action \"travel by sea from location l0 to location l1\" can be applied?",
            "answer": "Let's think step by step.   Step 1: Verify if there is a sequence of actions which transforms the current state into a state where the precondition of the action \"travel by sea from location l0 to location l1\" hold. Step 2: The following sequence of actions would transition to such a state: sail from location l1 to location l0, unload the car c4 from the ferry to location l0, board car c1 at location l0. **Final Answer**: Yes."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 6 locations across 2 cities.  The locations are in cities as follows: l0-0, l0-1, and l0-2 are in c0; l1-1, l1-2, and l1-0 are in c1.  Currently, a0 is at l1-0, t1 is at l1-1, t0 is at l0-0, p2 and p1 are in t1, p0 and p3 are in a0.",
            "question": "Is it possible to transition to a state where the action \"offload the object p0 from the truck p0 at location p1\" can be applied?",
            "answer": "Let's think step by step. Step 1: Verify if there is a sequence of actions which transforms the current state into a state where the precondition of the action \"offload the object p0 from the truck p0 at location p1\" hold. Step 2: Action preconditions are \"p0 is in p0 and p0 is at p1\". Step 3: These facts are not reachable together, as they include mutually exclusive facts \"p0 is in p0 and p0 is at p1\". **Final Answer**: No."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_areach_mcq": {
      "task": "acp_areach_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_areach_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0, with the car c1 on board. The cars are at locations as follows: c0 is at l0.",
            "question": "Which of the following actions can eventually be applied? A. embark the car c0 at location l0 on to the ferry.  B. travel by sea from location c0 to location c1.  C. fly from location l0 to location l1.  D. board the car c0 at location l0 into the airplane.",
            "answer": "Let's think step by step.   Step 1: Verify if there is a sequence of actions which transforms the current state into a state where the precondition of the action \"embark the car c0 at location l0 on to the ferry\" hold. Step 2: The following sequence of actions would transition to such a state: travel by sea from location l0 to location l1, debark the car c1 from the ferry to location l1, travel by sea from location l1 to location l0. **Final Answer**: A."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-1 and l1-0 are in c1; l0-0 and l0-1 are in c0.  Currently, a0 is at l0-0, t0 is at l0-1, p3 and t1 are at l1-0, p0 is in t1, p2 and p1 are in a0.",
            "question": "Which of the following actions can eventually be applied? A. offload the object p3 from the truck p3 at location l1-1.  B. navigate the truck c1 which is in location p0 in city l0-1 to another location t1 in the same city.  C. fly the airplane a0 from airport l1-0 to airport l0-0.  D. fly the airplane a0 to the airport l0-0 in city l1-0.",
            "answer": "Let's think step by step.   Step 1: Verify if there is a sequence of actions which transforms the current state into a state where the precondition of the action \"fly the airplane a0 from airport l1-0 to airport l0-0\" hold. Step 2: The following sequence of actions would transition to such a state: drive truck t0 from location l0-1 in city c0 to location l0-0 in the same city, fly the airplane a0 from location l0-0 to location l1-0, navigate the truck t1 which is in location l1-0 in city c1 to another location l1-1 in the same city. **Final Answer**: C."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_just_bool": {
      "task": "acp_just_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_just_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0 location and it is empty. The cars are at locations as follows: c0 and c1 are at l0. The goal is to reach a state where the following facts hold: Car c1 is at location l1 and Car c0 is at location l1",
            "question": "Given the plan: \\\"board the car c1 at the location l0, sail from location l0 to location l1, unload the car c1 from the ferry to location l1, travel by sea from location l1 to location l0, board the car c0 at location l0, travel by sea from location l0 to location l1, unload the car c0 from the ferry to location l1, embark the car c1 at location l1 on to the ferry, debark car c1 to location l1 from the ferry\\\"; can the following pair of consecutive actions be removed from this plan and still have a valid plan:  embark the car c1 at location l1 on to the ferry and debark the car c1 to location l1 from the ferry?",
            "answer": "Let's think step by step.   Step 1: A valid plan is a sequence of actions that is executable from the current state and achieves the goal.  Step 2: Consecutive actions \"embark the car c1 at location l1 on to the ferry and debark the car c1 to location l1 from the ferry\" can be removed from the plan and still have a valid plan. **Final Answer**: Yes."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-0 and l1-1 are in c1; l0-1 and l0-0 are in c0.  Currently, p3, p2, and p1 are at l1-0, p0 and t1 are at l1-1, a0 is at l0-0, t0 is at l0-1. The goal is to reach a state where the following facts hold: p0 is at l0-0, p2 is at l1-0, p3 is at l0-1, and p1 is at l1-0. Given the plan: \\\"load the object p0 from location l1-1 into the truck t1, navigate the truck t1 which is in location l1-1 in city c1 to another location l1-0 in the same city, offload the object p0 from the truck t1 at location l1-0, drive truck t1 from location l1-0 in city c1 to location l1-1 in the same city, fly airplane a0 from airport l0-0 to airport l1-0, load the object p0 from location l1-0 onto the airplane a0, load the object p3 from location l1-0 onto the airplane a0, fly the airplane a0 from airport l1-0 to airport l0-0, unload the object p0 from the airplane a0 at location l0-0, remove the object p3 from the airplane a0 and place it on the location l0-0, drive the truck t0 in city c0 from location l0-1 to location l0-0, place the object p3 into the truck t0 at location l0-0, navigate the truck t0 from location l0-0 in city c0 to location l0-1 in the same city, unload object p3 from truck t0 at location l0-1\\\"",
            "question": "can the following pair of consecutive actions be removed from this plan and still have a valid plan:  place the object p0 onto the airplane a0 at location l1-0 and place the object p3 onto the airplane a0 at location l1-0?",
            "answer": "Let's think step by step.   Step 1: A valid plan is a sequence of actions that is exectuable from the current state and achieves the goal.  Step 2: Consecutive actions \"place the object p0 onto the airplane a0 at location l1-0 and place the object p3 onto the airplane a0 at location l1-0\" cannot be removed from the plan and still have a valid plan. **Final Answer**: No."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_just_mcq": {
      "task": "acp_just_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_just_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0 location and it is empty. The cars are at locations as follows: c0 and c1 are at l0. The goal is to reach a state where the following facts hold: Car c1 is at location l1 and Car c0 is at location l1.",
            "question": "Given the plan: \\\"board the car c0 at the location l0, travel by sea from location l0 to location l1, unload the car c0 from the ferry to location l1, travel by sea from location l1 to location l0, board the car c1 at location l0, sail from location l0 to location l1, debark the car c1 from the ferry to location l1, travel by sea from location l1 to location l0\\\"; which of the following actions can be removed from this plan and still have a valid plan?  A. board the car c1 at the location l0.  B. debark car c1 to location l1 from the ferry.  C. travel by sea from location l1 to location l0.  D. sail from location l0 to location l1.",
            "answer": "Let's think step by step.   Step 1: A valid plan is a sequence of actions that is exectuable from the current state and achieves the goal.  Step 2: The 2nd instance of  \"travel by sea from location l1 to location l0\" can be removed from the plan and still have a valid plan. **Final Answer**: C."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l0-0 and l0-1 are in c0; l1-0 and l1-1 are in c1.  Currently, p2, p1, and p3 are at l1-0, p0 and t1 are at l1-1, a0 is at l0-0, t0 is at l0-1. The goal is to reach a state where the following facts hold: p3 is at l0-1, p0 is at l0-0, p2 is at l1-0, and p1 is at l1-0.",
            "question": "Given the plan: \\\"load object p0 into truck t1 at location l1-1, navigate the truck t1 which is in location l1-1 in city c1 to another location l1-0 in the same city, offload the object p0 from the truck t1 at location l1-0, fly the airplane a0 from location l0-0 to location l1-0, load object p0 into airplane a0 at location l1-0, place the object p3 onto the airplane a0 at location l1-0, fly the airplane a0 from location l1-0 to location l0-0, unload the object p0 from the airplane a0 at location l0-0, unload the object p3 from the airplane a0 at location l0-0, navigate the truck t0 from location l0-1 in city c0 to location l0-0 in the same city, load object p3 into truck t0 at location l0-0, drive truck t0 from location l0-0 in city c0 to location l0-1 in the same city, offload the object p3 from the truck t0 at location l0-1, drive truck t0 from location l0-1 in city c0 to location l0-0 in the same city, navigate the truck t0 from its current location l0-0 in city c0 to the new location l0-1 within the same city\\\"; which of the following pair of consecutive actions can be removed from this plan and still have a valid plan?  A. drive the truck t0 in city c0 from location l0-1 to location l0-0 and navigate the truck t0 which is in location l0-0 in city c0 to another location l0-1 in the same city.  B. unload object p3 from truck t0 at location l0-1 and drive truck t0 from location l0-1 in city c0 to location l0-0 in the same city.  C. drive truck t0 from location l0-1 in city c0 to location l0-0 in the same city and load the object p3 from location l0-0 into the truck t0.  D. unload the object p0 from the airplane a0 at location l0-0 and remove the object p3 from the airplane a0 and place it on the location l0-0.",
            "answer": "Let's think step by step.   Step 1: A valid plan is a sequence of actions that is exectuable from the current state and achieves the goal.  Step 2: Consecutive actions \"drive the truck t0 in city c0 from location l0-1 to location l0-0 and navigate the truck t0 which is in location l0-0 in city c0 to another location l0-1 in the same city\" can be removed from the plan and still have a valid plan. **Final Answer**: A."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_land_bool": {
      "task": "acp_land_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_land_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 5 cars, numbered consecutively.  Currently, the ferry is at l1 location and it is empty. The cars are at locations as follows: c4 and c2 are at l1; c0, c1, and c3 are at l0. The goal is to reach a state where the following facts hold: Car c4 is at location l0, Car c0 is at location l1, Car c1 is at location l0, Car c3 is at location l0, and Car c2 is at location l1.",
            "question": "Is the following fact a landmark (must hold at some point along any plan) for the current state? The ferry is at l0 location.",
            "answer": "Let's think step by step.   Step 1: A fact is a landmark if it must hold at some point along any plan. Step 2: The fact \"The ferry is at l0 location.\" can be found by a simple procedure that traces back such atoms from the goal. **Final Answer**: Yes."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-1 and l1-0 are in c1; l0-0 and l0-1 are in c0.  Currently, t0 is at l0-0, t1, a0, p1, and p2 are at l1-0, p3 is in t1, p0 is in a0. The goal is to reach a state where the following facts hold: p2 is at l1-0, p0 is at l0-0, p3 is at l0-1, and p1 is at l1-0.",
            "question": "Is the following fact a landmark (must hold at some point along any plan) for the current state? p2 is in a0.",
            "answer": "Let's think step by step.   Step 1: A fact is a landmark if it must hold at some point along any plan. Step 2: The fact \"p2 is in a0.\" is not achieved along the following plan: remove the object p3 from the truck t1 and place it on the location l1-0, load the object p3 from location l1-0 into the airplane a0, load the object p2 from location l1-0 into the airplane a0, remove the object p2 from the airplane a0 and place it on the location l1-0, fly the airplane a0 from the airport l1-0 to the airport l0-0, unload the object p3 from the airplane a0 at location l0-0, remove the object p0 from the airplane a0 and place it on the location l0-0, place the object p3 into the truck t0 at location l0-0. drive the truck t0 in city c0 from location l0-0 to location l0-1, unload the object p3 from the truck t0 at location l0-1. **Final Answer**: No."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_land_mcq": {
      "task": "acp_land_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_land_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0 location and it is empty. The cars are at locations as follows: c1 is at l0; c0 is at l1. The goal is to reach a state where the following facts hold: Car c1 is at location l1 and Car c0 is at location l1.",
            "question": "Which of the following facts is a landmark (must hold at some point along any plan) for the current state? A. Car c0 is on the ferry.  B. Ferry has car c1 on board and Car c0 is at location l0.  C. Ferry has car c1 on board.  D. Ferry has car c1 on board and Car c0 is on the ferry.",
            "answer": "Let's think step by step.   Step 1: A fact is a landmark if it must hold at some point along any plan. Step 2: The fact \"Ferry has car c1 on board\" can be found by a simple procedure that traces back such atoms from the goal. **Final Answer**: C."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-1 and l1-0 are in c1; l0-1 and l0-0 are in c0.  Currently, p1 and t0 are at l0-0, a0, p0, p3, and p2 are at l1-0, t1 is at l1-1. The goal is to reach a state where the following facts hold: p0 is at l0-0, p1 is at l1-0, p3 is at l0-1, and p2 is at l1-0.",
            "question": "Which of the following facts is a landmark (must hold at some point along any plan) for the current state? A. p3 is at l0-0.  B. p1 is at l0-1.  C. p0 is in t0.  D. p2 is in a0.",
            "answer": "Let's think step by step.   Step 1: A fact is a landmark if it must hold at some point along any plan. Step 2: The fact \"p3 is at l0-0\" can be found by a simple procedure that traces back such atoms from the goal. **Final Answer**: A."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_prog_bool": {
      "task": "acp_prog_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_prog_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0, with the car c0 on board. The cars are at locations as follows: c1 is at l0.",
            "question": "Will the fact \\\"Car c0 is at location l0\\\" hold after performing the action \\\"travel by sea from location l0 to location l1\\\" in the current state?",
            "answer": "Let's think step by step. Step 1: The following fact(s) do not hold in the current state: Car c0 is at location l0. Step 2: The action adds the following fact(s): The ferry is at l1 location Step 3: Fact(s) \"Car c0 is at location l0\" are not added. **Final Answer**: No."
          },
          {
            "context": "A robot is in a grid and can only move to places that are connected to its current position.  The grid size is 5x5, and the locations are of the form fi-jf (e.g., f3-2f or f0-1f). The grid cells are connected to their neighbors (e.g., f1-2f is connected to the four neighbors f0-2f, f2-2f, f1-1f, and f1-3f). Some positions on the grid are locked and can be opened with a key of a matching shape. The robot has an arm that can pick up a key when the key is in same location as the robot and the arm is empty.   There are 4 keys in 1 different shapes: Key key0-1 is of shape shape0, Key key0-3 is of shape shape0, Key key0-2 is of shape shape0, Key key0-0 is of shape shape0.   Currently, the robot is at position f4-2f and its arm is empty. All the positions are open except the following: f0-1f has shape0 shaped lock, f4-0f has shape0 shaped lock, f4-4f has shape0 shaped lock, f0-3f has shape0 shaped lock. Key key0-3 is at position f2-1f. Key key0-0 is at position f2-2f. Key key0-1 is at position f4-3f. Key key0-2 is at position f4-2f.",
            "question": "Will the fact \\\"Robot is holding key0-2\\\" hold after performing the action \\\"retrieve the key key0-2 from its current position f4-2f\\\" in the current state?",
            "answer": "Let's think step by step. Step 1: The following fact(s) do not hold in the current state: Robot is holding key0-2. Step 2: The action adds the following fact(s): Robot is holding key0-2 Step 3: Fact(s) \"Robot is holding key0-2\" are added. **Final Answer**: Yes."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_prog_mcq": {
      "task": "acp_prog_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_prog_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l1, with the car c1 on board. The cars are at locations as follows: c0 is at l1.",
            "question": "Which the following facts hold after performing the action \\\"travel by sea from location l1 to location l0\\\" in the current state? **Possible Answers**: A. Car c0 is at location l1 and The ferry is at l1 location.  B. The ferry is at l0 location and The ferry is at l1 location.  C. The ferry is at l0 location.  D. The ferry is at l0 location and Car c0 is at location l1.",
            "answer": "Let's think step by step.   Step 1: The following fact(s) do not hold in the current state: The ferry is at l0 location. Step 2: The action adds the following fact(s): The ferry is at l0 location Step 3: The following fact(s) hold in the current state: Car c0 is at location l1. Step 4: The action deletes the following fact(s): The ferry is at l1 location Step 5: Fact(s) \"The ferry is at l0 location\" are added and Fact(s) \"Car c0 is at location l1\" are not deleted. **Final Answer**: D."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-1 and l1-0 are in c1; l0-1 and l0-0 are in c0.  Currently, a0 is at l0-0, t1 and p0 are at l1-1, t0 is at l0-1, p1 is in t1, p2 and p3 are in a0.",
            "question": "Which the following facts hold after performing the action \\\"drive truck t0 from location l0-1 in city c0 to location l0-1 in the same city\\\" in the current state? A. p3 is in t1.  B. a0 is at l0-0 and p3 is in t1.  C. a0 is at l0-0.  D. None of the above.",
            "answer": "Let's think step by step.   Step 1: The following fact(s) hold in the current state: a0 is at l0-0. Step 2: The action deletes the following fact(s): t0 is at l0-1 Step 3: Fact(s) \"a0 is at l0-0\" are not deleted. **Final Answer**: C."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_reach_bool": {
      "task": "acp_reach_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_reach_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l1 location and it is empty. The cars are at locations as follows: c0 is at l1; c1 is at l0.  is at l1 location and it is empty. The cars are at locations as follows: c0 is at l1; c1 is at l0.",
            "question": "Is it possible to transition to a state where the following holds: The ferry is empty and The ferry is at c1 location.",
            "answer": "Let's think step by step.  Step 1: Verify if the following fact(s) hold in current state or if there is a sequence of actions which transforms the current state into a state where they hold: The ferry is empty and The ferry is at c1 location. Step 2: These facts do not hold in the current state. Step 3: The fact There are no cars on the ferry and The ferry is at c1 location is not reachable even by a simple iterative procedure that accumulates all facts made true by applicable actions. **Final Answer**: No."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 5 trucks and 1 airplane, as well as 4 packages. There are 15 locations across 5 cities.  The locations are in cities as follows: l4-2, l4-1, and l4-0 are in c4; l3-2, l3-0, and l3-1 are in c3; l0-2, l0-0, and l0-1 are in c0; l1-0, l1-1, and l1-2 are in c1; l2-1, l2-0, and l2-2 are in c2.  Currently, p3 and t1 are at l1-1, t3 is at l3-0, p0 is at l1-0, t4 is at l4-2, p1 and t2 are at l2-0, a0 is at l4-0, t0 is at l0-2, p2 is in a0.",
            "question": "Is it possible to transition to a state where the following holds:  l2-2 is in l3-2?",
            "answer": "Let's think step by step.  Step 1: Verify if the following fact(s) hold in current state or if there is a sequence of actions which transforms the current state into a state where they hold: l2-2 is in l3-2. Step 2: These facts do not hold in the current state. Step 3: The fact l2-2 is in l3-2 is not reachable even by a simple iterative procedure that accumulates all facts made true by applicable actions. **Final Answer**: No."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_reach_mcq": {
      "task": "acp_reach_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_reach_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0, with the car c0 on board. The cars are at locations as follows: c1 is at l1.",
            "question": "Which of the following options can hold in a state that can potentially be reached? A. There are no cars on the ferry and The ferry is at l1 location.  B. Car l1 is at location c1.  C. Ferry has car c0 on board and There are no cars on the ferry.  D. The ferry is at c0 location and Car c1 is at location l1.",
            "answer": "Let's think step by step.   Step 1: Verify if the following facts hold in the current state:  There are no cars on the ferry and The ferry is at l1 location. Step 2: These facts do not hold. Step 3: Verify if there is a sequence of actions which transforms the current state into a state where these facts hold. Step 4: The following sequence of actions would transition to such a state: debark the car c0 from the ferry to location l0, sail from location l0 to location l1. **Final Answer**: A."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 2 trucks and 1 airplane, as well as 4 packages. There are 4 locations across 2 cities.  The locations are in cities as follows: l1-1 and l1-0 are in c1; l0-0 and l0-1 are in c0.  Currently, p1 and t1 are at l1-1, a0 and p0 are at l0-0, t0 and p3 are at l0-1, p2 is at l1-0.",
            "question": "Which of the following options can hold in a state that can potentially be reached? A. p2 is at p0.  B. t0 is at l0-0.  C. p3 is in t1 and p3 is in t0.  D. l1-1 is at p1.",
            "answer": "Let's think step by step.   Step 1: Verify if the following fact holds in the current state:  t0 is at l0-0. Step 2: The fact does not hold. Step 3: Verify if there is a sequence of actions which transforms the current state into a state where the fact holds. Step 4: The following sequence of actions would transition to such a state: drive the truck t0 in city c0 from location l0-1 to location l0-0, navigate the truck t0 which is in location l0-0 in city c0 to another location l0-0 in the same city. **Final Answer**: B."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_val_bool": {
      "task": "acp_val_bool",
      "tag": [
        "acp_bool_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_val_bool",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0 location and it is empty. The cars are at locations as follows: c0 and c1 are at l0. The goal is to reach a state where the following facts hold: Car c1 is at location l1 and Car c0 is at location l1.",
            "question": "Is the following sequence of actions \\\"embark the car c0 at location l0 on to the ferry travel by sea from location l0 to location l1 debark the car c0 to location l1 from the ferry sail from location l1 to location l0 board car c1 at location l0 travel by sea from location l0 to location l1 sail from location l1 to location l0\\\" a plan for the current state?",
            "answer": "Let's think step by step.   Step 1: For a sequence of actions to be a plan, it should be applicable in the current state, all actions should be valid, and the resulting state should entail the goal. Step 2: All the actions in the sequence are valid in this problem. Step 3: The action sequence is applicable in the current state. Step 4: However, the following goal fact(s) are not achieved: Car c1 is at location l1. **Final Answer**: No."
          },
          {
            "context": "This is a blocksworld domain where blocks can be placed on top of each other or on the table. There is one robotic arm that can move the block.  There are 3 blocks.  Currently, the robotic arm is empty. The following block(s) are on the table: block_1 and block_2. The following block(s) is stacked on top of another block: block_3 is on block_2. The goal is to reach a state where the following facts hold: The block block_1 is currently situated above the block block_2 and The block block_3 is on top of block block_1.",
            "question": "Is the following sequence of actions \"unstack the object block_3 from the object block_2 place the object block_3 on top of the object block_2 unstack object block_3 from object block_2 put down object block_3 collect the object block_3 from the table place the object block_3 on the table pick up object block_2 from the table place the object block_2 on the table pick up the object block_1 from the table stack the object block_1 on top of the object block_2 pick up object block_3 from the table stack object block_3 on top of object block_1\" a plan for the current state? ",
            "answer": "Let's think step by step.  Step 1: For a sequence of actions to be a plan, it should be applicable in the current state, all actions should be valid, and the resulting state should entail the goal. Step 2: All the actions in the sequence are valid in this problem. Step 3: The action sequence is applicable in the current state. Step 4: The action sequence achieves the goal. **Final Answer**: Yes."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "aggregation": "mean",
          "higher_is_better": true,
          "ignore_case": true,
          "ignore_punctuation": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "**Question**:",
          "**Question:**",
          "Q:",
          "\n\n\n\n"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "extract-yes-no",
          "filter": [
            {
              "function": "regex",
              "regex_pattern": "((?<=The answer is )(.*)(?=.)|(?<=the answer is )(.*)(?=.)|(?<=The answer: )(.*)(?=.)|(?<=The final answer: )(.*)(?=.)|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.)|\\b(Yes|No|yes|no)\\b)"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    },
    "acp_val_mcq": {
      "task": "acp_val_mcq",
      "tag": [
        "acp_mcq_cot_2shot",
        "acp_bench"
      ],
      "dataset_path": "ibm-research/acp_bench",
      "dataset_name": "acp_val_mcq",
      "test_split": "test",
      "doc_to_text": "**Question**: {{context}}  {{question}} **Thoughts**:",
      "doc_to_target": "{{answer}}",
      "unsafe_code": false,
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "fewshot_config": {
        "sampler": "first_n",
        "samples": [
          {
            "context": "This is a ferry domain, where the task is to transport cars from their start to their goal locations, using a ferry. Each location is accessible by ferry from each other location. The cars can be debarked or boarded, and the ferry can carry only one car at a time.  There are 2 locations and 2 cars, numbered consecutively.  Currently, the ferry is at l0 location and it is empty. The cars are at locations as follows: c1 and c0 are at l0. The goal is to reach a state where the following facts hold: Car c0 is at location l1 and Car c1 is at location l1.",
            "question": "Which of the following claims is true with regard to the following sequence of actions \\\"board the car c0 at the location l0, travel by sea from location l0 to location l1, unload the car c0 from the ferry to location l1, travel by sea from location l1 to location l0, board the car c1 at location l0, sail from location l0 to location l1, debark the car c1 from the ferry to location l1\\\" and the current state? A.  The sequence is not applicable.  B. The sequence is a plan.  C. The sequence is applicable, but does not achieve the goal.  D. The sequence is not valid.",
            "answer": "Let's think step by step.   Step 1: For a sequence of actions to be a plan, all actions should be valid, applicable in sequence, and achieve the goal. Step 2: The action sequence is applicable and it achieves the goal. **Final Answer**: B."
          },
          {
            "context": "There are several cities, each containing several locations, some of which are airports. There are also trucks, which can drive within a single city, and airplanes, which can fly between airports. The goal is to get some packages from various locations to various new locations.  There are 3 trucks and 1 airplane, as well as 4 packages. There are 9 locations across 3 cities.  The locations are in cities as follows: l1-2, l1-0, and l1-1 are in c1; l0-0, l0-1, and l0-2 are in c0; l2-1, l2-2, and l2-0 are in c2.  Currently, p2 and t1 are at l1-2, p3 is at l2-0, t0 and p0 are at l0-2, p1 is at l1-0, a0 is at l0-0, t2 is at l2-2. The goal is to reach a state where the following facts hold: p1 is at l1-0, p3 is at l2-0, p2 is at l0-1, and p0 is at l1-2.",
            "question": "Which of the following claims is true with regard to the following sequence of actions \\\"load object p0 into truck t0 at location l0-2, sail the ship t0 into city c0 from location l0-2 in city l0-0, remove the object p0 from the truck t0 and place it on the location l0-0, load the object p0 from location l0-0 onto the airplane a0, fly the airplane a0 from the airport l0-0 to the airport l1-0, remove the object p0 from the airplane a0 and place it on the location l1-0, load object p2 into truck t1 at location l1-2, navigate the truck t1 from its current location l1-2 in city c1 to the new location l1-0 within the same city place the object p0 into the truck t1 at location l1-0 remove the object p2 from the truck t1 and place it on the location l1-0 load the object p2 from location l1-0 onto the airplane a0 fly the airplane a0 from location l1-0 to location l2-0 fly airplane a0 from airport l2-0 to airport l0-0 unload the object p2 from the airplane a0 at location l0-0 place the object p2 into the truck t0 at location l0-0 navigate the truck t0 from its current location l0-0 in city c0 to the new location l0-1 within the same city offload the object p2 from the truck t0 at location l0-1 drive the truck t1 in city c1 from location l1-0 to location l1-2 offload the object p0 from the truck t1 at location l1-2 navigate the truck t2 from its current location l2-2 in city c2 to the new location l2-1 within the same city\\\" and the current state? A. The sequence is not valid.  B. The sequence is applicable, but does not achieve the goal.  C. The sequence is a plan.  D.  The sequence is not applicable.",
            "answer": "Let's think step by step.   Step 1: For a sequence of actions to be a plan, all actions should be valid, applicable in sequence, and achieve the goal. Step 2: The action \"sail the ship t0 into city c0 from location l0-2 in city l0-0\" is not valid in this problem. **Final Answer**: A."
          }
        ]
      },
      "num_fewshot": 2,
      "metric_list": [
        {
          "metric": "exact_match",
          "ignore_case": true,
          "ignore_punctuation": true,
          "regexes_to_ignore": [
            "\\.$",
            ",",
            "\\\\",
            "\n",
            "\""
          ]
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n\n\n\n",
          "**Question**:",
          "**Question:**",
          "Q:"
        ],
        "do_sample": false,
        "temperature": 0.0,
        "max_gen_toks": 1024
      },
      "repeats": 1,
      "filter_list": [
        {
          "name": "mcq-extract",
          "filter": [
            {
              "function": "multi_choice_regex",
              "group_select": -1,
              "ignore_case": true,
              "ignore_punctuation": true,
              "regex_pattern": "(((?<=[answer is ])[A-D])|([A-D]\\n)|([A-D]\\.)|( [A-D] )|(^[A-D]$)|(\\[[A-D]\\])|([A-D])|(?<=..Final Answer..: )(.*)(?=.)|(?<=..answer..: )(.*)(?=.)|(?<=..Answer..: )(.*)(?=.))"
            },
            {
              "function": "take_first"
            }
          ]
        }
      ],
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0,
        "pretrained": "mosaicml/mpt-7b-instruct",
        "tokenizer_mode": "auto",
        "tensor_parallel_size": 2,
        "data_parallel_size": 1,
        "gpu_memory_utilization": 0.7,
        "enforce_eager": true
      }
    }
  },
  "versions": {
    "acp_app_bool": 1.0,
    "acp_app_mcq": 1.0,
    "acp_areach_bool": 1.0,
    "acp_areach_mcq": 1.0,
    "acp_just_bool": 1.0,
    "acp_just_mcq": 1.0,
    "acp_land_bool": 1.0,
    "acp_land_mcq": 1.0,
    "acp_prog_bool": 1.0,
    "acp_prog_mcq": 1.0,
    "acp_reach_bool": 1.0,
    "acp_reach_mcq": 1.0,
    "acp_val_bool": 1.0,
    "acp_val_mcq": 1.0
  },
  "n-shot": {
    "acp_app_bool": 2,
    "acp_app_mcq": 2,
    "acp_areach_bool": 2,
    "acp_areach_mcq": 2,
    "acp_just_bool": 2,
    "acp_just_mcq": 2,
    "acp_land_bool": 2,
    "acp_land_mcq": 2,
    "acp_prog_bool": 2,
    "acp_prog_mcq": 2,
    "acp_reach_bool": 2,
    "acp_reach_mcq": 2,
    "acp_val_bool": 2,
    "acp_val_mcq": 2
  },
  "higher_is_better": {
    "acp_app_bool": {
      "exact_match": true
    },
    "acp_app_mcq": {
      "exact_match": true
    },
    "acp_areach_bool": {
      "exact_match": true
    },
    "acp_areach_mcq": {
      "exact_match": true
    },
    "acp_just_bool": {
      "exact_match": true
    },
    "acp_just_mcq": {
      "exact_match": true
    },
    "acp_land_bool": {
      "exact_match": true
    },
    "acp_land_mcq": {
      "exact_match": true
    },
    "acp_prog_bool": {
      "exact_match": true
    },
    "acp_prog_mcq": {
      "exact_match": true
    },
    "acp_reach_bool": {
      "exact_match": true
    },
    "acp_reach_mcq": {
      "exact_match": true
    },
    "acp_val_bool": {
      "exact_match": true
    },
    "acp_val_mcq": {
      "exact_match": true
    }
  },
  "n-samples": {
    "acp_reach_mcq": {
      "original": 130,
      "effective": 130
    },
    "acp_val_mcq": {
      "original": 130,
      "effective": 130
    },
    "acp_land_mcq": {
      "original": 130,
      "effective": 130
    },
    "acp_areach_mcq": {
      "original": 120,
      "effective": 120
    },
    "acp_prog_mcq": {
      "original": 130,
      "effective": 130
    },
    "acp_just_mcq": {
      "original": 130,
      "effective": 130
    },
    "acp_app_mcq": {
      "original": 130,
      "effective": 130
    },
    "acp_areach_bool": {
      "original": 120,
      "effective": 120
    },
    "acp_app_bool": {
      "original": 130,
      "effective": 130
    },
    "acp_reach_bool": {
      "original": 130,
      "effective": 130
    },
    "acp_prog_bool": {
      "original": 130,
      "effective": 130
    },
    "acp_just_bool": {
      "original": 130,
      "effective": 130
    },
    "acp_land_bool": {
      "original": 130,
      "effective": 130
    },
    "acp_val_bool": {
      "original": 130,
      "effective": 130
    }
  },
  "config": {
    "model": "vllm",
    "model_args": "pretrained=mosaicml/mpt-7b-instruct,tokenizer_mode=auto,tensor_parallel_size=2,data_parallel_size=1,gpu_memory_utilization=0.7,enforce_eager=true",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "d8d2570",
  "date": 1753855998.9423745,
  "pretty_env_info": "PyTorch version: 2.7.0+cu126\nIs debug build: False\nCUDA used to build PyTorch: 12.6\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.5 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: 14.0.0-1ubuntu1.1\nCMake version: version 3.22.1\nLibc version: glibc-2.35\n\nPython version: 3.11.11 (main, Dec 11 2024, 16:28:39) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-5.15.0-143-generic-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.8.93\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100 80GB PCIe\nGPU 1: NVIDIA A100 80GB PCIe\n\nNvidia driver version: 570.169\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_engines_precompiled.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_engines_runtime_compiled.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_graph.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_heuristic.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops.so.9.6.0\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.7\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.7\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn.so.8.9.4\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.9.4\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.9.4\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.9.4\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.9.4\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.9.4\n/usr/local/cuda-11.8/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.9.4\n/usr/local/cuda-12.1/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.9.4\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        48 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               64\nOn-line CPU(s) list:                  0-63\nVendor ID:                            AuthenticAMD\nModel name:                           AMD EPYC 7313 16-Core Processor\nCPU family:                           25\nModel:                                1\nThread(s) per core:                   2\nCore(s) per socket:                   16\nSocket(s):                            2\nStepping:                             1\nFrequency boost:                      enabled\nCPU max MHz:                          3000.0000\nCPU min MHz:                          1500.0000\nBogoMIPS:                             6000.55\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate ssbd mba ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd amd_ppin arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif v_spec_ctrl umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca\nVirtualization:                       AMD-V\nL1d cache:                            1 MiB (32 instances)\nL1i cache:                            1 MiB (32 instances)\nL2 cache:                             16 MiB (32 instances)\nL3 cache:                             256 MiB (8 instances)\nNUMA node(s):                         2\nNUMA node0 CPU(s):                    0-15,32-47\nNUMA node1 CPU(s):                    16-31,48-63\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Not affected\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Not affected\nVulnerability Spec rstack overflow:   Mitigation; safe RET\nVulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl and seccomp\nVulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; STIBP always-on; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Not affected\n\nVersions of relevant libraries:\n[pip3] flashinfer-python==0.2.5+cu126torch2.6\n[pip3] numpy==2.2.6\n[pip3] nvidia-cublas-cu12==12.6.4.1\n[pip3] nvidia-cuda-cupti-cu12==12.6.80\n[pip3] nvidia-cuda-nvrtc-cu12==12.6.77\n[pip3] nvidia-cuda-runtime-cu12==12.6.77\n[pip3] nvidia-cudnn-cu12==9.5.1.17\n[pip3] nvidia-cufft-cu12==11.3.0.4\n[pip3] nvidia-curand-cu12==10.3.7.77\n[pip3] nvidia-cusolver-cu12==11.7.1.2\n[pip3] nvidia-cusparse-cu12==12.5.4.2\n[pip3] nvidia-cusparselt-cu12==0.6.3\n[pip3] nvidia-nccl-cu12==2.26.2\n[pip3] nvidia-nvjitlink-cu12==12.6.85\n[pip3] nvidia-nvtx-cu12==12.6.77\n[pip3] torch==2.7.0\n[pip3] torchaudio==2.7.0\n[pip3] torchvision==0.22.0\n[pip3] triton==3.3.0\n[conda] cuda-cudart               11.8.89                       0    nvidia\n[conda] cuda-cudart_linux-64      12.8.57              h3f2d84a_1    conda-forge\n[conda] cuda-nvrtc                12.8.61              hbd13f7d_0    conda-forge\n[conda] faiss-gpu                 1.10.0          py3.11_h125bfce_0_cuda11.4.4    pytorch\n[conda] flashinfer-python         0.2.5+cu126torch2.6          pypi_0    pypi\n[conda] libcublas                 11.11.3.6                     0    nvidia\n[conda] libcurand                 10.3.9.55            hbd13f7d_0    conda-forge\n[conda] libfaiss                  1.10.0          h125bfce_0_cuda11.4.4    pytorch\n[conda] mkl                       2023.0.0         h6d00ec8_25399  \n[conda] numpy                     2.2.6                    pypi_0    pypi\n[conda] numpy-base                1.26.4          py311hbfb1bba_0  \n[conda] nvidia-cublas-cu12        12.6.4.1                 pypi_0    pypi\n[conda] nvidia-cuda-cupti-cu12    12.6.80                  pypi_0    pypi\n[conda] nvidia-cuda-nvrtc-cu12    12.6.77                  pypi_0    pypi\n[conda] nvidia-cuda-runtime-cu12  12.6.77                  pypi_0    pypi\n[conda] nvidia-cudnn-cu12         9.5.1.17                 pypi_0    pypi\n[conda] nvidia-cufft-cu12         11.3.0.4                 pypi_0    pypi\n[conda] nvidia-curand-cu12        10.3.7.77                pypi_0    pypi\n[conda] nvidia-cusolver-cu12      11.7.1.2                 pypi_0    pypi\n[conda] nvidia-cusparse-cu12      12.5.4.2                 pypi_0    pypi\n[conda] nvidia-cusparselt-cu12    0.6.3                    pypi_0    pypi\n[conda] nvidia-nccl-cu12          2.26.2                   pypi_0    pypi\n[conda] nvidia-nvjitlink-cu12     12.6.85                  pypi_0    pypi\n[conda] nvidia-nvtx-cu12          12.6.77                  pypi_0    pypi\n[conda] torch                     2.7.0                    pypi_0    pypi\n[conda] torchaudio                2.7.0                    pypi_0    pypi\n[conda] torchvision               0.22.0                   pypi_0    pypi\n[conda] triton                    3.3.0                    pypi_0    pypi",
  "transformers_version": "4.53.3",
  "lm_eval_version": "0.4.9",
  "upper_git_hash": "d8d2570564a12a68ad1e18f0663f11d9260c11a5",
  "tokenizer_pad_token": [
    "<|endoftext|>",
    "0"
  ],
  "tokenizer_eos_token": [
    "<|endoftext|>",
    "0"
  ],
  "tokenizer_bos_token": [
    "<|endoftext|>",
    "0"
  ],
  "eot_token_id": 0,
  "max_length": 2048,
  "task_hashes": {},
  "model_source": "vllm",
  "model_name": "mosaicml/mpt-7b-instruct",
  "model_name_sanitized": "mosaicml__mpt-7b-instruct",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 1242707.148644451,
  "end_time": 1243150.28097053,
  "total_evaluation_time_seconds": "443.132326078834"
}